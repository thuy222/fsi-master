variables:
  GIT_STRATEGY: clone

image: node:lts-stretch

stages:
  - version
  - build

cache:
  paths:
    - node_modules/

before_script:
  - apt-get update
  - apt-get install jq python-pip -y
  - pip install "awscli<1.18"
  - npm config set prefix /usr/local
  - yarn
  - yarn bootstrap

release-build-production-oidc:
    stage: build
    when: manual
    script:
      - echo "***Install docker***"
      - export AWS_REGION=$(curl --silent http://169.254.169.254/latest/dynamic/instance-identity/document/|jq -r '.region')
      - apt install -y apt-transport-https ca-certificates curl software-properties-common gnupg2 zip
      - curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -
      - echo "deb https://dl.yarnpkg.com/debian/ stable main" | tee /etc/apt/sources.list.d/yarn.list
      - apt update && apt install -y yarn
      - curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -
      - add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable"
      - apt update && apt install -y docker-ce
      - service docker start
      - timeout 15 sh -c "until docker info; do echo .; sleep 1; done"
      - echo "***Start creating AWS deployment package***"
      - cd ./packages/api
      - CI=false yarn build-ui
      - cd ../../
      - export AWS_REGION=$(curl --silent http://169.254.169.254/latest/dynamic/instance-identity/document/|jq -r '.region')
      - apt install -y apt-transport-https ca-certificates curl software-properties-common gnupg2 zip
      - export ECS_PKG="ecs_deploy_package_${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}.zip"
      - export TAG=${CI_JOB_ID}
      - export ECS_PKG_TAG="${ECS_PKG}_${TAG}.zip"
      - $(aws ecr get-login --no-include-email --region ${AWS_REGION})
      - export API_IMAGE_TAG=${AWS_ECR_REPOSITORY_URL_PRODUCTION}:api_${TAG}
      - export LATEST=${AWS_ECR_REPOSITORY_URL_PRODUCTION}:api_latest
      - docker build -t ${API_IMAGE_TAG} .
      - docker tag ${API_IMAGE_TAG} ${LATEST}
      - docker push ${API_IMAGE_TAG} && docker push ${LATEST}
      - printf '[{"name":'\"co-fs-oidc-prd\"',"imageUri":'\"${API_IMAGE_TAG}\"'}]' >> ./imagedefinitions-prd.json
      - printf '[{"name":'\"co-fs-oidc-stg\"',"imageUri":'\"${API_IMAGE_TAG}\"'}]' >> ./imagedefinitions-stg.json
      - zip -r -0 ${ECS_PKG} ./imagedefinitions-*.json
      - aws s3 cp ${ECS_PKG} ${ECS_S3_DEPLOYMENT_BUCKET_PRODUCTION}
      - aws s3 cp ${ECS_PKG} ${ECS_S3_DEPLOYMENT_BUCKET_PRODUCTION}/${ECS_PKG_TAG}
    only:
      refs:
        - master
        - develop
    variables:
      AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID_PRODUCTION
      AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY_PRODUCTION

build-oidc:
    stage: build
    when: manual
    services:
      - docker:19.03.13-dind
      - node:lts-stretch
    before_script:
      - apt-get update
      - apt-get install jq python-pip -y
      - pip install "awscli<1.18"
      - npm config set prefix /usr/local
      - yarn
      - yarn bootstrap
    script:
      - echo "***Install docker***"
      - export AWS_REGION=$(curl --silent http://169.254.169.254/latest/dynamic/instance-identity/document/|jq -r '.region')
      - apt install -y apt-transport-https ca-certificates curl software-properties-common gnupg2 zip
      - curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -
      - echo "deb https://dl.yarnpkg.com/debian/ stable main" | tee /etc/apt/sources.list.d/yarn.list
      - apt update && apt install -y yarn
      - curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -
      - add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable"
      - apt update && apt install -y docker-ce
      - service docker start
      - timeout 15 sh -c "until docker info; do echo .; sleep 1; done"
      - echo "***Start creating AWS deployment package***"
      - cd ./packages/api
      - CI=false yarn build-ui
      - CI=false yarn build
      - cd ../../
      - export AWS_REGION=$(curl --silent http://169.254.169.254/latest/dynamic/instance-identity/document/|jq -r '.region')
      - apt install -y apt-transport-https ca-certificates curl software-properties-common gnupg2 zip
      - export ECS_PKG="ecs_deploy_package_build-development-oidc.zip"
      - export TAG=oidcv2_${CI_JOB_ID}
      - export ECS_PKG_TAG="ecs_deploy_package_build-development-oidc_${TAG}.zip"
      - $(aws ecr get-login --no-include-email --region ${AWS_REGION})
      - export API_IMAGE_TAG=${AWS_ECR_REPOSITORY_URL}:${TAG}
      - export LATEST=${AWS_ECR_REPOSITORY_URL}:api_latest
      - docker build -t ${API_IMAGE_TAG} .
      - docker tag ${API_IMAGE_TAG} ${LATEST}
      - docker push ${API_IMAGE_TAG} && docker push ${LATEST}
      - printf '[{"name":'\"co-fs-oidc-dev\"',"imageUri":'\"${API_IMAGE_TAG}\"'}]' >> ./imagedefinitions-dev.json
      - printf '[{"name":'\"co-fs-oidc-uat\"',"imageUri":'\"${API_IMAGE_TAG}\"'}]' >> ./imagedefinitions-uat.json
      - printf '[{"name":'\"co-fs-oidc-qa\"',"imageUri":'\"${API_IMAGE_TAG}\"'}]' >> ./imagedefinitions-qa.json
      - zip -r -0 ${ECS_PKG} ./imagedefinitions-*.json
      - aws s3 cp ${ECS_PKG} ${ECS_S3_DEPLOYMENT_BUCKET}
      - aws s3 cp ${ECS_PKG} ${ECS_S3_DEPLOYMENT_BUCKET}/${ECS_PKG_TAG}
    only:
      refs:
        - develop
    variables:
      AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID_DEVELOPMENT
      AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY_DEVELOPMENT

build-production-oidc:
    stage: build
    when: manual
    services:
      - docker:19.03.13-dind
      - node:lts-stretch
    before_script:
      - apt-get update
      - apt-get install jq python-pip -y
      - pip install "awscli<1.18"
      - npm config set prefix /usr/local
      - yarn
      - yarn bootstrap
    script:
      - echo "***Install docker***"
      - export AWS_REGION=$(curl --silent http://169.254.169.254/latest/dynamic/instance-identity/document/|jq -r '.region')
      - apt install -y apt-transport-https ca-certificates curl software-properties-common gnupg2 zip
      - curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -
      - echo "deb https://dl.yarnpkg.com/debian/ stable main" | tee /etc/apt/sources.list.d/yarn.list
      - apt update && apt install -y yarn
      - curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -
      - add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable"
      - apt update && apt install -y docker-ce
      - service docker start
      - timeout 15 sh -c "until docker info; do echo .; sleep 1; done"
      - echo "***Start creating AWS deployment package***"
      - cd ./packages/api
      - CI=false yarn build-ui
      - CI=false yarn build
      - cd ../../
      - export AWS_REGION=$(curl --silent http://169.254.169.254/latest/dynamic/instance-identity/document/|jq -r '.region')
      - apt install -y apt-transport-https ca-certificates curl software-properties-common gnupg2 zip
      - export ECS_PKG="ecs_deploy_package_${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}.zip"
      - export TAG=oidcv2_${CI_JOB_ID}
      - export ECS_PKG_TAG="${ECS_PKG}_${TAG}.zip"
      - $(aws ecr get-login --no-include-email --region ${AWS_REGION})
      - export API_IMAGE_TAG=${AWS_ECR_REPOSITORY_URL_PRODUCTION}:${TAG}
      - export LATEST=${AWS_ECR_REPOSITORY_URL_PRODUCTION}:api_latest
      - docker build -t ${API_IMAGE_TAG} .
      - docker tag ${API_IMAGE_TAG} ${LATEST}
      - docker push ${API_IMAGE_TAG} && docker push ${LATEST}
      - printf '[{"name":'\"co-fs-oidc-stg\"',"imageUri":'\"${API_IMAGE_TAG}\"'}]' >> ./imagedefinitions-stg.json
      - printf '[{"name":'\"co-fs-oidc-prod\"',"imageUri":'\"${API_IMAGE_TAG}\"'}]' >> ./imagedefinitions-prod.json
      - zip -r -0 ${ECS_PKG} ./imagedefinitions-*.json
      - aws s3 cp ${ECS_PKG} ${ECS_S3_DEPLOYMENT_BUCKET_PRODUCTION}
      - aws s3 cp ${ECS_PKG} ${ECS_S3_DEPLOYMENT_BUCKET_PRODUCTION}/${ECS_PKG_TAG}
    only:
      refs:
        - develop
        - feat/seperate-login-register-url
        - master
    variables:
      AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID_PRODUCTION
      AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY_PRODUCTION

build-development-oidc:
    stage: build
    when: manual
    services:
      - docker:19.03.13-dind
      - node:lts-stretch
    before_script:
      - apt-get update
      - apt-get install jq python-pip -y
      - pip install "awscli<1.18"
      - npm config set prefix /usr/local
      - yarn
      - yarn bootstrap
    script:
      - echo "***Install docker***"
      - export AWS_REGION=$(curl --silent http://169.254.169.254/latest/dynamic/instance-identity/document/|jq -r '.region')
      - apt install -y apt-transport-https ca-certificates curl software-properties-common gnupg2 zip
      - curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -
      - echo "deb https://dl.yarnpkg.com/debian/ stable main" | tee /etc/apt/sources.list.d/yarn.list
      - apt update && apt install -y yarn
      - curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -
      - add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable"
      - apt update && apt install -y docker-ce
      - service docker start
      - timeout 15 sh -c "until docker info; do echo .; sleep 1; done"
      - echo "***Start creating AWS deployment package***"
      - cd ./packages/api
      - CI=false yarn build-ui
      - CI=false yarn build
      - cd ../../
      - export AWS_REGION=$(curl --silent http://169.254.169.254/latest/dynamic/instance-identity/document/|jq -r '.region')
      - apt install -y apt-transport-https ca-certificates curl software-properties-common gnupg2 zip
      - export ECS_PKG="ecs_deploy_package_${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}.zip"
      - export TAG=oidcv2_${CI_JOB_ID}
      - export ECS_PKG_TAG="${ECS_PKG}_${TAG}.zip"
      - $(aws ecr get-login --no-include-email --region ${AWS_REGION})
      - export API_IMAGE_TAG=${AWS_ECR_REPOSITORY_URL}:${TAG}
      - export LATEST=${AWS_ECR_REPOSITORY_URL}:api_latest
      - docker build -t ${API_IMAGE_TAG} .
      - docker tag ${API_IMAGE_TAG} ${LATEST}
      - docker push ${API_IMAGE_TAG} && docker push ${LATEST}
      - printf '[{"name":'\"co-fs-oidc-dev\"',"imageUri":'\"${API_IMAGE_TAG}\"'}]' >> ./imagedefinitions-dev.json
      - printf '[{"name":'\"co-fs-oidc-qa\"',"imageUri":'\"${API_IMAGE_TAG}\"'}]' >> ./imagedefinitions-qa.json
      - printf '[{"name":'\"co-fs-oidc-uat\"',"imageUri":'\"${API_IMAGE_TAG}\"'}]' >> ./imagedefinitions-uat.json
      - zip -r -0 ${ECS_PKG} ./imagedefinitions-*.json
      - aws s3 cp ${ECS_PKG} ${ECS_S3_DEPLOYMENT_BUCKET}
      - aws s3 cp ${ECS_PKG} ${ECS_S3_DEPLOYMENT_BUCKET}/${ECS_PKG_TAG}
    only:
      refs:
        - develop
        - feat/seperate-login-register-url
        - master
    variables:
      AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID_DEVELOPMENT
      AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY_DEVELOPMENT